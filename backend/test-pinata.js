import dotenv from 'dotenv';
import IPFSService from './services/ipfsService.js';

// Load environment variables
dotenv.config();

async function testPinata() {
  try {
    console.log('Testing Pinata IPFS Configuration...');
    console.log('IPFS_PROVIDER:', process.env.IPFS_PROVIDER);
    console.log('PINATA_JWT length:', process.env.PINATA_JWT ? process.env.PINATA_JWT.length : 'NOT SET');
    console.log('PINATA_JWT first 10 chars:', process.env.PINATA_JWT ? process.env.PINATA_JWT.substring(0, 10) + '...' : 'NOT SET');
    console.log('GATEWAY_URL:', process.env.GATEWAY_URL || 'NOT SET');
    
    // Check if JWT token looks correct (should have 3 parts separated by dots)
    if (process.env.PINATA_JWT) {
      const parts = process.env.PINATA_JWT.split('.');
      console.log('JWT Token parts count:', parts.length);
      if (parts.length === 3) {
        console.log('✅ JWT Token format looks correct');
      } else {
        console.log('⚠️  Warning: JWT tokens should have 3 parts separated by dots');
      }
    }
    
    const ipfsService = new IPFSService();
    
    // Create a simple test image (1x1 pixel JPEG)
    const testImageBuffer = Buffer.from([
      0xFF, 0xD8, 0xFF, 0xE0, 0x00, 0x10, 0x4A, 0x46, 0x49, 0x46, 0x00, 0x01,
      0x01, 0x01, 0x00, 0x48, 0x00, 0x48, 0x00, 0x00, 0xFF, 0xDB, 0x00, 0x43,
      0x00, 0x08, 0x06, 0x06, 0x07, 0x06, 0x05, 0x08, 0x07, 0x07, 0x07, 0x09,
      0x09, 0x08, 0x0A, 0x0C, 0x14, 0x0D, 0x0C, 0x0B, 0x0B, 0x0C, 0x19, 0x12,
      0x13, 0x0F, 0x14, 0x1D, 0x1A, 0x1F, 0x1E, 0x1D, 0x1A, 0x1C, 0x1C, 0x20,
      0x24, 0x2E, 0x27, 0x20, 0x22, 0x2C, 0x23, 0x1C, 0x1C, 0x28, 0x37, 0x29,
      0x2C, 0x30, 0x31, 0x34, 0x34, 0x34, 0x1F, 0x27, 0x39, 0x3D, 0x38, 0x32,
      0x3C, 0x2E, 0x33, 0x34, 0x32, 0xFF, 0xC0, 0x00, 0x11, 0x08, 0x00, 0x01,
      0x00, 0x01, 0x01, 0x01, 0x11, 0x00, 0x02, 0x11, 0x01, 0x03, 0x11, 0x01,
      0xFF, 0xC4, 0x00, 0x14, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0xFF, 0xC4,
      0x00, 0x14, 0x10, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xDA, 0x00, 0x0C,
      0x03, 0x01, 0x00, 0x02, 0x11, 0x03, 0x11, 0x00, 0x3F, 0x00, 0x8F, 0x80,
      0x00, 0x0F, 0xFF, 0xD9
    ]);
    
    console.log('Uploading test image to Pinata...');
    const result = await ipfsService.uploadImage(testImageBuffer, 'test-image.jpg');
    
    console.log('✅ Upload successful!');
    console.log('Hash:', result.hash);
    console.log('URL:', result.url);
    console.log('CID:', result.cid);
    
  } catch (error) {
    console.error('❌ Test failed:', error.message);
    console.error('Full error:', error);
  }
}

testPinata();
